name: Validate commit or PR title format is correct

on:
  pull_request:
    types: [opened, synchronize, edited]
    branches:
    - main

  workflow_call:
    inputs:
      commit_or_pr_title:
        required: false
        type: string
        description: Commit or PR title to validate
      format:
        required: false
        type: string
        default: conventional
        description: Commit or PR title format to validate against, from conventional, gitmoji or custom
      regex:
        required: false
        type: string
        description: Regex to validate against

permissions: read-all

concurrency:
  group: commit-pr-title-${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    if: ${{ github.actor != 'dependabot[bot]'  && github.actor != 'allcontributors[bot]' }}
    runs-on: ubuntu-latest
    outputs:
      regex: ${{ steps.set_regex.outputs.regex }}
    steps:
    - name: Check regex for custom format
      id: check_regex
      env:
        INPUT_TO_VALIDATE: ${{ inputs.commit_or_pr_title || github.event.pull_request.title }}
      run: |
        if [[ "${{ inputs.format }}" == "custom" ]]; then
          if [[ -z "${{ inputs.regex }}" ]]; then
            echo "# Validation failed"
            echo ":rotating_light: Missing regex for custom format" >> $GITHUB_STEP_SUMMARY
            echo "Custom format specified but no regex provided" >> $GITHUB_STEP_SUMMARY
            echo "Please provide a regex to validate `$INPUT_TO_VALIDATE`" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        fi

    - name: Set regex to use
      id: set_regex
      run: |
        if [[ "${{ inputs.format }}" == "conventional" ]]; then
          echo "regex=^[a-z_]+(!)?(: .*)?$"  >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.format || 'gitmoji' }}" == "gitmoji" ]]; then
          echo "regex=^:[a-z_]+: [a-z_]+(!)?(: .*)?$" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.format }}" == "custom" ]]; then
          echo "regex=${{ inputs.regex }}" >> $GITHUB_OUTPUT
        else
          echo "# Validation failed"
          echo ":rotating_light: The specified format is invalid" >> $GITHUB_STEP_SUMMARY
          echo "The format `${{ inputs.format }}` is not supported yet" >> $GITHUB_STEP_SUMMARY
          echo "Valid formats are: conventional, gitmoji and custom" >> $GITHUB_STEP_SUMMARY
          echo "Custom format requires a regex to be provided" >> $GITHUB_STEP_SUMMARY
          echo "Please open an issue on the [workflows repository](https://github.com/gsuquet/workflows/issues/new?assignees=&labels=enhancement%2Cto+sort&projects=&template=feature.yml) with the corresponding regex to add support for `${{ inputs.format }}`" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

  validate:
    if: ${{ github.actor != 'dependabot[bot]'  && github.actor != 'allcontributors[bot]' }}
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Validate commit or PR title format
      id: validate
      env:
        INPUT_TO_VALIDATE: ${{ inputs.commit_or_pr_title || github.event.pull_request.title }}
      run: |
        if echo "$INPUT_TO_VALIDATE" | grep -Pq "${{ needs.setup.outputs.regex }}"; then
          echo "# Validation passed"
          echo ":white_check_mark: Correct format" >> $GITHUB_STEP_SUMMARY
          echo "\`$INPUT_TO_VALIDATE\` matches the \`${{ inputs.format || 'gitmoji' }}\` format when analyzed using the following regex : \`${{ needs.setup.outputs.regex }}\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "# Validation failed"
          echo ":rotating_light: Incorrect format" >> $GITHUB_STEP_SUMMARY
          echo "\`$INPUT_TO_VALIDATE\` does not match the \`${{ inputs.format || 'gitmoji' }}\` format when analyzed using the following regex : \`${{ needs.setup.outputs.regex }}\`" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
